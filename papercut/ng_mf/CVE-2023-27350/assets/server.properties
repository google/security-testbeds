######### Server Config Properties #########

#
# IMPORTANT:  Do not change the permissions set on this file.  For security
# reasons, this file should only be accessible by administrators.
#


### Built-in Admin User ###
admin.username=admin
### Admin Password ###
# This may be manually set to a plain text password.
# If set by the application it will be prefixed with HASH:
admin.password=HASH\:$2a$10$vffclJviLIFScExR9ktm8OlukbxlbgqeZqovGtlBE0pVnM0Msyup.

### Enable ports 80 (HTTP) and 443 (HTTPS) ###
#
# IMPORTANT: Windows only (on Mac and Linux, use port forwarding as
# non-privileged processes can't access these ports). For instructions see
# manual chapter "Advanced Customization" ->  "Enable ports 80 and 443".
# Set to "Y" to enable on Windows.
server.enable-http-on-port-80=N
server.enable-https-on-port-443=N

### Server Port (Default: 9191 and SSL: 9192 and high security: 9195) ###
# IMPORTANT: Use these options only if directed by support.
server.port=80
server.ssl.port=9192
server.ssl.high-security-port=9195

### SSL Key/Certificate ###
# Custom SSL keystore example (recommend placing in the custom directory)
#server.ssl.keystore=custom/my-ssl-keystore
#server.ssl.keystore-password=mypassword
#server.ssl.key-password=mypassword

### SSL Protocols/Ciphers ###
# All allowed SSL protocols and cipher suites
# Refer to https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html
# Note that for both protocols and cipher suites a special value "auto" can be used to have automatically
# the strongest protocols and cipher suites enabled on the inbound connections by excluding weak and vulnerable choices.
# This can pre select perfect forward secrecy (ECDHE/DHE), SHA2+ suites only and drop protocols SSLv3/TLS1.0 in .
# conjunction with strong cryptographic defaults applied via server.ssl.using-strong-defaults.
# See https://www.papercut.com/kb/Main/SSLCipherConfiguration
#
# Eg.
#server.ssl.protocols=auto
#server.ssl.cipher-suites=auto
#server.ssl.using-strong-defaults=Y
#
# Eg. To use only TLS1.2+ protocols and forward secrecy cipher suites, use the following:
#server.ssl.using-strong-defaults=Y
#server.ssl.protocols=TLSv1.2, TLSv1.3
#server.ssl.cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
#
# Eg: TLS1.2+With modern ciphers (Elliptic curve ciphers only)
#server.ssl.using-strong-defaults=Y
#server.ssl.protocols=auto
#server.ssl.cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
#
# Use best practice crypto defaults
#server.ssl.using-strong-defaults=N
#
# Other TLS settings:
#server.ssl.follow-client-cipher-order=Y
#server.ssl.sni-host-check-enabled=N
#server.ssl.debug-output=N

# Select whether or not to allow login when cookies are disabled.
# By default, cookies are required for login.
# Change this value to "N" to allow login when cookies are disabled.
# This will create a session ID that is appended to the URL.
# NOTE: Disabling cookies may lead to sessions in URLs being leaked.
require-cookies-for-login=Y

# Set the HTTP SameSite header attribute for the session cookie.
# By default, the SameSite attribute is empty and decided by the browser's default.
# This value can be set to "none" or left unset ("") to allow the browser to decide (modern browser default is lax).
# This will result in the session cookie using the SameSite attribute provided.
# NOTE: "none" will only work over https and cause http to not work correctly.
server.cookies.session.same-site=

### Configure HSTS ###
# HSTS is also enabled in the Options > Advanced Security Settings section.
# Enabling the HTTP Strict Transport Security (HSTS) option instructs the
# browser to connect directly via HTTPS changing the port from 80 to 443
# (hosting on port 443 required).
# This is a more secure mechanism as a pure redirection from HTTP to HTTPS
# poses the risk of a 'man-in-the-middle' security attack.
# HSTS is ignored by old browsers.
#
# Where:
#   server.ssl.hsts-enabled: (Y/N) Indicates if HSTS is enabled.
#   server.ssl.hsts-include-sub-domains: Enables HSTS for all sub-domains.
#   server.ssl.hsts-max-age-secs: Indicates how long (in seconds) HSTS to be
#                                 active for, where 31536000 = 1 Year.
server.ssl.hsts-enabled=N
server.ssl.hsts-max-age-secs=31536000
server.ssl.hsts-include-sub-domains=Y

### CSRF checks ###
# Controls whether HTTP request origin/destination headers (Origin/Referer) are validated.
# Requests that can change state in the system should be validated as issued by the same origin by
# checking that origin is known and matches the destination target URL.
# Origin is determined from HTTP headers Origin/Referer and target from Host/X-Forwarded-Host.
#
# Where:
#   server.csrf-check.validate-request-origin= (Y/N) Enables or disables origin validation.
#   server.csrf-check.deny-unknown-origin= (Y/N) Controls if requests are to be denied anyway if origin is unknown.
#
#server.csrf-check.validate-request-origin=Y
#server.csrf-check.deny-unknown-origin=Y

### Server web request logging ###
#
# Enables web request logging in NCSA format to [app-path]\server\logs\web\.
# This will log both user web access and all web-service requests.
#
server.log-web-requests=N

### Allowed HTTP request methods ###
# Controls whether the server allows or rejects specific HTTP request methods.
# To stop a vulnerability that could be exploited and cause a security attack.
# Default HTTP request methods that the server allows are: GET, POST, HEAD, PUT, PATCH, DELETE and OPTIONS.
# Default WebDav request methods that the server allows are: COPY, LOCK, MKCOL, MOVE, PROPFIND, PROPPATCH, UNLOCK
# To allow other HTTP methods or remove support for any of the defaults, overwrite
#
#server.request-methods-allowed=GET, POST, HEAD, PUT, PATCH, DELETE, OPTIONS, COPY, LOCK, MKCOL, MOVE, PROPFIND, PROPPATCH, UNLOCK

### Server connection configuration ###
# Specific network interface specified as host or IP to listen on (listening on all interfaces by default).
# server.listen-interface=<host | IP>
#
# Max amount of time in milliseconds a connection is held idle.
# server.max-idle-time=30000 (default)
#
# Maximum size of HTTP/HTTPS connection pool (bigger = more concurrent connections and more memory overhead).
# server.max-threads=16000 (default for 64bit JVM/OS)
#
# Maximum size in bytes individual request headers can take, reducing increases resilience to denial of service attacks.
# server.request-header-size=8192 (default)
#
# Force HTTP host header to the specified value rather than the one coming from actual request.
# server.force-host-header=

### Internal State Path ###
# Specify the path to internal state files.  Access to these files is needed to
# preserve state between server restarts. Default is: [app-path]\server\data\internal\state
#server.internal-state-path=

##
## Enables a technique to reduce application server resource usage for long lived connections.
##
## This option currently applies to user client connections only, and can become useful when there are more than around
## 1,000 concurrent connections.
##
##server.enable-async-requests=Y

### Database Settings ####

database.type=Internal
database.driver=
database.url=
database.username=
database.password=


# MS SQLServer connection example
# IMPORTANT: The username below is a SQL Server user, not a Windows user.
# For Integrated/Windows authentication add integratedSecurity=true property to the connection string
# Eg: jdbc:sqlserver://localhost:1433;databaseName=papercut;integratedSecurity=true
#database.type=SQLServer
#database.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver
#database.url=jdbc:sqlserver://localhost:1433;databaseName=papercut
#database.username=
#database.password=

# PostgreSQL connection example
#database.type=PostgreSQL
#database.driver=org.postgresql.Driver
#database.url=jdbc:postgresql://localhost/papercut
#database.username=
#database.password=

# MySQL connection example
# IMPORTANT: Include the MySQL JDBC driver in the "server/lib-ext" directory as described in manual.
#database.type=MySQL
#database.driver=com.mysql.jdbc.Driver
#database.url=jdbc:mysql://localhost/papercut
#database.username=
#database.password=

# Oracle connection example (requires Oracle 9+)
# IMPORTANT: Include the Oracle JDBC driver in the "server/lib-ext" directory as described in manual.
# Remember to replace "ServiceName" with your database's service name identifier.  The service name for Oracle Express Edition is "XE".
#database.type=Oracle
#database.driver=oracle.jdbc.driver.OracleDriver
#database.url=jdbc:oracle:thin:@localhost:1521/ServiceName
#database.username=
#database.password=


# Database enable connection check debugging info on borrow/returned connections
#database.database.debug-connection-checks=Y

# Database connection pool debugging
# See https://www.mchange.com/projects/c3p0/#configuring_to_debug_and_workaround_broken_clients
# Below if set, will enforce a time limit on connection borrowing and capture and dump offending stacktraces
#database.pool.unreturned-connection-timeout=10
#database.pool.debug-unreturned-connection-stack-traces=true


################################################################################
## Central Reports Settings
##
## Central Reports creates consolidated reports across multiple application
## servers.  To use Central Reports, make sure the prerequisites below are met
## and configure as documented.  Please refer to the Central Reports chapter in
## the manual for more information.
##
## Central Reports Prerequisites:
## 1. This server is using an external database
##    (see database.* options above)
## 2. All remote servers are also using the same type of external database.
## 3. All remote servers are running the same version.
## 4. All remote databases are remotely accessible.
##
## Running Central Reports:
## 1. Add the "Access Central Reports" administrator right to users needing
##    access.
## 2. View status and run reports from
##    https://<server name>:9192/central-reports
################################################################################

##
## Enable Central Reports (Y/N)
##
## This option can be used to switch off Central Reports temporarily without
## changing the other configuration options below. When this option is disabled
## users will not be able to log into the Central Reports interface, and
## scheduled Central Reports will not run.
##
central-reports.enabled=Y

##
## Include the local server's data in Central Reports (Y/N)
##
## This option can be set to N if the local server does not contain useful data
## for reporting, e.g. if it is not a print server and is just for running
## Central Reports.
##
## Default: Y
##
central-reports.database.local.include=Y

##
## A meaningful name for the local server. This appears on the Status tab in the
## Central Reports interface.
##
## Default: Local Site
##
central-reports.database.local.label=Local Site

##
## Specify whether all remote databases must be available to create Central Reports.
## By default, the reports will only be run when all remote databases are online and available.
## Set to N to run reports even when one or more remote databases are not online.
## The aggregated reports will not include data from those databases.
##
## Default: Y
##
central-reports.require-all-databases-online=Y

##
## Configure access to remote databases used to create reports.
##
## Specify these four statements for each remote database.
## Use ID 1 for the first remote server, 2 for the second server and so on.
##   central-reports.database.1.label=
##   central-reports.database.1.url=
##   central-reports.database.1.username=
##   central-reports.database.1.password=
## Where:
##   label:     A meaningful name for the remote server.
##   url:       A JDBC URL for access to the remote database. This should use
##              the same format as for the local database configured above in
##              the database.url setting.
##   username:  A database username providing read access to the remote
##              database.
##   password:  Password for the specified username.
##

##
## Example: Two remote branches, Perth and Sydney, using SQL Server:
##
#central-reports.database.1.label=Perth Branch
#central-reports.database.1.url=jdbc:sqlserver://per1.example.com:1433;databaseName=papercut
#central-reports.database.1.username=admin
#central-reports.database.1.password=xJf56gy

#central-reports.database.2.label=Sydney Branch
#central-reports.database.2.url=jdbc:sqlserver://syd1.example.com:1433;databaseName=papercut
#central-reports.database.2.username=admin
#central-reports.database.2.password=dF95FCd

##
## Configure High Availability
##
## Please refer to the Manual to find out all of the required tasks to set up high availability
## in the Application Server before setting "enabled = Y".
##
##   fail-over-interval-secs
##       If an active server is inactive for this period of seconds, a passive server will take over.
##   startup-timeout-secs
##       The amount of time an active server has to reach the server started state. After this period a passive
##       server will take over.
## We recommend the following default values for fail-over-interval-secs and startup-timeout-secs for most situations,
## and changes should only be done under the guidance of PaperCut Support.
##
#high-availability-guard.enabled = N
#high-availability-guard.fail-over-interval-secs = 30
#high-availability-guard.startup-timeout-secs = 300

##
## Configure the temp folder cleanup
##
## If PaperCut terminates unexpectedly, it might leave behind files in the temp folder. To prevent an excessive
## accumulation of unneeded files, the server performs a cleanup task when starting. Use the properties below to
## configure when certain files should be removed.
##
##   temp-folder-cleanup.font-files.min-age-in-days
##       When creating PDF reports, PaperCut stores font files in the temp folder. They have names like
##       +~JF356721552542178711.tmp and (as of PaperCut 20) occupy around 500 MB. They are deleted after 60 days
##       by default. The value can be set to 0 to always remove all font files (independent of their age).
##
## We recommend leaving the default values. An excessive accumulation of orphaned files might point to an underlying
## problem, like PaperCut terminating unexpectedly after running out of memory. Applying a more aggressive cleanup can
## be a workaround while investigating the root cause.
##
